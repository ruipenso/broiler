/**
 * BASE - FUNCTIONS
 *
 * List of functions:
 *
 * - _strip-unit
 * - _convert-to-rem
 * - rem-calc
 * - last
 * - opposite-direction
 */

/**
 * This is the default html and body font-size for the base rem value.
 *
 * @see _base.scss::$base-font-size
 */

$base-rem: 16px !default;

/**
 * Strips the unit of measure and returns it.
 */

@function _strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/**
 * Convert a single PXs value into a REM value.
 */

@function _convert-to-rem($value, $base: $base-rem) {
  $value: _strip-unit($value) / _strip-unit($base) * 1rem;

  /* Turn 0rem into 0 */
  @if ($value == 0rem) {
    $value: 0;
  }

  @return $value;
}

/**
 * Convert PX values into REM values.
 *
 * Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
 *
 *   rem-calc(10 20 30px 40);
 *
 * Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets:
 *
 *  rem-calc((10, 20, 30, 40px));
 *
 * Optionally call with a different base (eg: 8px) to calculate rem:
 *
 *   rem-calc(16px 32px 48px, 8px);
 *
 * If you require to comma separate your list:
 *
 *   rem-calc((16px, 32px, 48), 8px);
 */

@function rem-calc($values, $base: $base-rem) {
  $max: length($values);

  @if $max == 1 {
    @return _convert-to-rem(nth($values, 1), $base);
  }

  $remValues: ();

  @for $i from 1 through $max {
    $remValues: append($remValues, _convert-to-rem(nth($values, $i), $base));
  }

  @return $remValues;
}

/**
 * Retrieves last value from a list.
 */

@function last($list) {
  @return nth($list, length($list));
}

/**
 * Find the opposition direction.
 *
 * $direction - must be top, right, bottom or left.
 */

@function opposite-direction($direction) {
  @if ($direction == top) {
    @return bottom;
  }

  @if ($direction == right) {
    @return left;
  }

  @if ($direction == bottom) {
    @return top;
  }

  @if ($direction == left) {
    @return right;
  }
}
